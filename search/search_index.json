{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Automate your local and deployed infra in one line.</p> <p></p>"},{"location":"#what-is-bridge","title":"What is bridge?","text":"<p>Bridge enables you to seamlessly run and deploy all the infrastructure you need for a complete Django project.</p> <ul> <li>One line of copy-paste configuration</li> <li>Local Postgres database automatically configured and connected</li> <li>Local Redis and Celery instances automatically configured and connected</li> <li>Easy one-command deploy configuration to Render</li> </ul> <p>Get started</p> <p>FAQ</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#how-does-it-work-locally","title":"How does it work locally?","text":"<p>When running locally, Bridge uses Docker to create and manage containers for Postgres and Redis. Since Bridge is included in your settings module, it automatically configures your Django application to connect to these services. Celery and Flower require your application code, and are spun up as background processes.</p>"},{"location":"faq/#how-does-it-work-with-deployments","title":"How does it work with deployments?","text":"<p>When you are ready to deploy, Bridge creates configuration files for Render that specify how to build and run your Django application alongside the same services. Bridge also writes a \"Deploy to Render\" button straight into your README for added convenience! You can deploy your application by clicking the 'Deploy to Render' button shown on your project's GitHub page.</p>"},{"location":"faq/#what-if-i-dont-need-all-the-services-that-bridge-provides","title":"What if I don't need all the services that bridge provides?","text":"<p>Bridge is designed to be modular. You can configure only the services you need by creating or editing the <code>bridge.yaml</code> file that Bridge creates in your project root. By default, <code>enable_postgres: true</code> and <code>enable_worker: true</code> are set, but you can change these to <code>false</code> to prevent bridge from configuring Postgres and Celery respectively.</p>"},{"location":"faq/#how-can-i-stop-the-services-that-bridge-spins-up","title":"How can I stop the services that bridge spins up?","text":"<p><code>bridge stop</code> will stop all running services.</p>"},{"location":"faq/#how-can-i-access-the-database-directly","title":"How can I access the database directly?","text":"<p>Locally, bridge provides access to a psql shell through <code>bridge db shell</code>. Remotely, Render has instructions for connecting. </p>"},{"location":"faq/#how-can-i-access-redis-directly","title":"How can I access redis directly?","text":"<p>Bridge provides access to redis-cli through <code>bridge redis shell</code>. Remotely, Render has instructions for connecting.</p>"},{"location":"faq/#how-can-i-access-celery","title":"How can I access Celery?","text":"<p>Flower is a web interface into all the information you need to debug and work with Celery. By default, bridge will run Flower on http://localhost:5555.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Bridge includes an SDK and CLI tool which operate within your Django project. This page will guide you through the process of installing and configuring Bridge.</p>"},{"location":"getting-started/#requirements","title":"Requirements","text":"<p>Bridge requires Docker to be installed on your machine. Verify your docker installation with: <pre><code>&gt; docker version\nClient: ...\n</code></pre></p>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>Install bridge from PyPI: <pre><code>pip install python-bridge\n</code></pre></p>"},{"location":"getting-started/#usage","title":"Usage","text":"<p>Adding bridge to your project is incredibly simple.</p> <p>Add the following code to the end of your <code>settings.py</code> file (or <code>DJANGO_SETTINGS_MODULE</code>): <pre><code># Configure infrastructure with Bridge.\n# All other settings should be above these lines.\nfrom bridge.django import configure\n\nconfigure(locals())\n</code></pre></p> <p>The next time you start up your application, bridge will create and configure local infrastructure for you: <pre><code>&gt; ./manage.py runserver\n\nSetting up service bridge_postgres...\n[12:00:00] \u2713 Image postgres:12 pulled\n[12:00:00] \u2713 Container bridge_postgres started\n[12:00:00] \u2713 bridge_postgres is ready\nService bridge_postgres started!\nSetting up service bridge_redis...\n[12:00:00] \u2713 Image redis:7.2.4 pulled\n[12:00:00] \u2713 Container bridge_redis started\n[12:00:00] \u2713 bridge_redis is ready\nService bridge_redis started!\nSetting up service bridge_celery...\n[12:00:00] \u2713 Local worker started\nService bridge_celery started!\nSetting up service bridge_flower...\n[12:00:00] \u2713 Flower started\nService bridge_flower started!\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n</code></pre> That's it! You now have all the local infrastructure you need to run your django application.</p>"},{"location":"getting-started/#deploys","title":"Deploys","text":"<p>Bridge can handle deployed configuration for your app too! Simply run: <pre><code>bridge init render\n</code></pre> You may be prompted for the entrypoint of your application and settings file if bridge cannot detect them. </p> <p>Bridge will create all the configuration necessary for you to immediately deploy to Render. This includes a Blueprint <code>render.yaml</code> as well as build scripts and start scripts for your Django application.</p> <p>After running <code>bridge init render</code>, commit the changes and visit your project on GitHub. You will see the following button at the end of your README in the root of your repository:</p> <p></p> <p>To deploy your application to the world, simply click the button! Bridge will configure everything needed for Render to deploy and host your app.</p> <p>In the future, we'll look into supporting more deployment runtimes such as Heroku, AWS, GCP, Azure, and more.</p>"},{"location":"getting-started/#project-structure","title":"Project Structure","text":"<p>Note</p> <p>Bridge currently makes assumptions about your project structure as outlined below. If your project does not follow these conventions, you may need to adjust the generated files before deploying.</p> <p>Bridge assumes the following project structure: <pre><code>&lt;project root&gt;/\n\u251c\u2500\u2500 &lt;your app&gt;/\n\u2502   \u251c\u2500\u2500 settings.py\n\u2502   \u251c\u2500\u2500 [wsgi.py | asgi.py]\n\u2502   \u251c\u2500\u2500 ...\n\u251c\u2500\u2500 manage.py\n\u251c\u2500\u2500 [requirements.txt | poetry.lock | Pipfile.lock]\n\u251c\u2500\u2500 ...\n</code></pre></p> <p>This structure is the default for Django projects created with <code>django-admin startproject</code>. The generated build script in <code>bridge-django-render/build.sh</code> may need changes if your project structure differs significantly.</p>"}]}